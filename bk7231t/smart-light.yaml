substitutions:  
  name: smart-light
  device_description: "Smart Light Bulb 140"
  s_ip: 192.168.1.113  
  board: generic-bk7231t-qfn32-tuya

esphome:
  name: ${name}
  comment: ${device_description}
  #platformio_options:
    #board_build.f_cpu: 60000000L
          
bk72xx:
  board: generic-bk7231n-qfn32-tuya
  framework:
    version: latest

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_key

ota:
  - platform : esphome
    password: !secret hotspot_pw

wifi:
  id: iptime
  ssid: !secret wifi_ssid
  password: !secret wifi_password  
  #power_save_mode: HIGH
  fast_connect: true
  manual_ip: 
   static_ip: $s_ip
   gateway: 192.168.1.1
   subnet: 255.255.255.0
   dns1: 1.1.1.1
   dns2: 8.8.8.8
  # Enable fallback hotspot in case wifi connection fails
  ap:
    ssid: "${name} Fallback Hotspot"
    password: !secret hotspot_pw

web_server:
captive_portal:

time:
  - platform: homeassistant
    id: homeassistant_time

binary_sensor:
  - platform: status
    name: "${name} Connection Status"
    id: c_status

  - platform: template
    id: warning
    name: Overload Warning
    device_class: problem
    lambda: |-
     if (id(in_temp).state >= 100) {
     return true;
     } else {
     return false;
     }
    on_press:
      then:
        - delay: 5s
        - lambda: id(warning).publish_state(false);
sensor:
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "${name} WiFi Signal dB"
    id: wifi_signal_db
    internal: true
    update_interval: 300s
    entity_category: "diagnostic"

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "${name} WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "Signal %"
    entity_category: "diagnostic"
    device_class: ""
  - platform: internal_temperature
    name: "${name} Internal Temperature"
    id: in_temp
    on_value: 
      then:
        - if: # Relay Status OFF
           condition:
             and:
               - switch.is_on: switch_olp
               - binary_sensor.is_on: warning
           then:
             - light.turn_off: power_led


text_sensor:
  - platform: version
    name: "${name} Esphome Version"
  - platform: wifi_info
    ip_address:
     name: Device IP Address
    mac_address:
      name: ESP Mac Wifi Address

button:    
  - platform: restart
    name: "${name} Restart"
    id: re_start
    entity_category: diagnostic

light:
  - platform: rgbw
    id: power_led
    name: "${name} Smart Light"
    red: red
    green: green
    blue: blue
    white: color_temperature
    effects: 
      - pulse:
          name: "Slow Pulse"
          transition_length: 400ms
          update_interval: 400ms
          min_brightness: 50%
          max_brightness: 100%
      - pulse:
          name: "Fast Pulse"
          transition_length: 250ms
          update_interval: 250ms
          min_brightness: 50%
          max_brightness: 100%
      - random:
          name: "Random"
          transition_length: 1s
          update_interval: 2s
    on_turn_on: 
      then:
        - if: 
            condition:
              - lambda: return (id(effect).state == "None");
            then:
              - light.turn_on: power_led
        - if: 
            condition:
              - lambda: return (id(effect).state == "Slow Pulse");
            then:
              - light.turn_on: 
                  id: power_led
                  effect: "Slow Pulse"
        - if: 
            condition:
              - lambda: return (id(effect).state == "Fast Pulse");
            then:
              - light.turn_on: 
                  id: power_led
                  effect: "Fast Pulse"
        - if: 
            condition:
              - lambda: return (id(effect).state == "Random");
            then:
              - light.turn_on: 
                  id: power_led
                  effect: "Random"
  
  - platform: status_led
    id: s_led
    output: color_temperature

output:
  - platform: libretiny_pwm
    id: red
    pin: P6
  - platform: libretiny_pwm
    id: green
    pin: P26
  - platform: libretiny_pwm
    id: blue
    pin: P7
  - platform: libretiny_pwm
    id: color_temperature
    pin: P8                

select:
  - platform: template
    name: Light Effect
    id: effect
    options: 
      - None
      - Slow Pulse
      - Fast Pulse
      - Random
    initial_option: None
    optimistic: True
    on_value: 
      then:
        - if: 
            condition:
              - lambda: return (id(effect).state == "None");
            then:
              - script.execute: led_restore
        - if: 
            condition:
              - lambda: return (id(effect).state == "Slow Pulse");
            then:
              - light.turn_on: 
                  id: power_led
                  effect: "Slow Pulse"
        - if: 
            condition:
              - lambda: return (id(effect).state == "Fast Pulse");
            then:
              - light.turn_on: 
                  id: power_led
                  effect: "Fast Pulse"
        - if: 
            condition:
              - lambda: return (id(effect).state == "Random");
            then:
              - light.turn_on: 
                  id: power_led
                  effect: "Random"

switch:
    # Overload Protect
  - platform: template
    name: "${name} OverLoad Protection"    
    id: switch_olp
    restore_mode: RESTORE_DEFAULT_ON
    icon: mdi:toggle-switch
    optimistic: true
  - platform: template
    name: "White Light"    
    id: w_light    
    icon: mdi:lightbulb
    optimistic: true
    on_turn_on: 
      then:
        - light.turn_on: 
            id: power_led
            red: 100%
            green: 100%
            blue: 100%
            white: 100%
    on_turn_off: 
      then:
        - light.turn_off: power_led    

script:
  - id: led_restore
    mode: restart
    then:
      - if: # Relay Status OFF
           condition:
             - light.is_off: power_led
           then:
             - light.turn_off: power_led
           else:
             - light.turn_on: 
                  id: power_led
                  effect: "None"          